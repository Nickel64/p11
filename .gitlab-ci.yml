image: python

stages:
  - build
  - compile
  - test
  - deploy
  
build:
  stage: build
  script:
    - pip install --user -r requirements.txt
  tags:
    - docker
    
compile:
  stage: compile
  script:
    - python -m compileall 'src'
  tags:
    - docker
  
test:
  stage: test
  script:
    - python -m unittest discover src/test/
  tags:
    - docker
    
deploy:
  stage: deploy
#   before_script:
#   ##
#   ## Install ssh-agent if not already installed, it is required by Docker.
#   ## (change apt-get to yum if you use an RPM-based image)
#   ##
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

#   ##
#   ## Run ssh-agent (inside the build environment)
#   ##
#     - eval $(ssh-agent -s)

#   ##
#   ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
#   ## We're using tr to fix line endings which makes ed25519 keys work
#   ## without extra base64 encoding.
#   ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
#   ##
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

#   ##
#   ## Create the SSH directory and give it the right permissions
#   ##
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
  script:
    - echo "Deploy project"
    
    # - mkdir -p ~/.ssh
    # Paste the PRIVATE key into a gitlab variable. Pay attention to the linebreak at the end when pasting
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - chmod 600 ~/.ssh/id_rsa
    # - eval "$(ssh-agent -s)"
    # - ssh-add ~/.ssh/id_rsa
    # - ssh-keyscan -H 'gitlab.ecs.vuw.ac.nz' >> ~/.ssh/known_hosts
    
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 --decode)
    - ssh xXx~skrillex~xXx@103.23.18.230
    - git pull origin dev
    
  environment:
    name: staging
  when: manual
  only:
    - dev
  tags:
    - docker